import { serverEventSchema } from '@farcaster/miniapp-core';
import { verifyJsonFarcasterSignature, } from "./jfs.js";
import { BaseError, } from "./types.js";
export class InvalidEventDataError extends BaseError {
    name = 'VerifyJsonFarcasterSignature.InvalidEventDataError';
}
// Support legacy frame_* event names by mapping them to miniapp_*
const LEGACY_EVENT_MAP = {
    frame_added: 'miniapp_added',
    frame_removed: 'miniapp_removed',
    frame_add_rejected: 'miniapp_add_rejected',
};
export async function parseWebhookEvent(rawData, verifyAppKey) {
    const { fid, appFid, payload } = await verifyJsonFarcasterSignature(rawData, verifyAppKey);
    // Pase and validate event payload
    let payloadJson;
    try {
        payloadJson = JSON.parse(Buffer.from(payload).toString('utf-8'));
    }
    catch (error) {
        throw new InvalidEventDataError('Error decoding and parsing payload', error instanceof Error ? error : undefined);
    }
    const normalizedPayload = payloadJson && typeof payloadJson.event === 'string'
        ? {
            ...payloadJson,
            event: LEGACY_EVENT_MAP[payloadJson.event] ?? payloadJson.event,
        }
        : payloadJson;
    const event = serverEventSchema.safeParse(normalizedPayload);
    if (event.success === false) {
        throw new InvalidEventDataError('Invalid event payload', event.error);
    }
    return { fid, appFid, event: event.data };
}
